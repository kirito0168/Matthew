const VulnerabilityModel = require('../models/vulnerabilityModel');
const ActivityLogModel = require('../models/activityLogModel');
const { addExperience, checkAchievements } = require('./userController');
const { validateSeverity, validateStatus, sanitizeInput, validateRequired, validatePagination } = require('../utils/validation');

// Create vulnerability report
const createVulnerability = (req, res) => {
    const { title, description, severity } = req.body;

    // Validate required fields
    const validation = validateRequired({ title, description, severity });
    if (!validation.isValid) {
        return res.status(400).json({ 
            success: false, 
            message: `${validation.field} is required` 
        });
    }

    // Validate severity
    if (!validateSeverity(severity)) {
        return res.status(400).json({ 
            success: false, 
            message: 'Invalid severity level. Must be: low, medium, high, or critical' 
        });
    }

    // Sanitize inputs
    const sanitizedTitle = sanitizeInput(title);
    const sanitizedDescription = sanitizeInput(description);

    // Calculate exp reward based on severity
    const expRewards = {
        low: 50,
        medium: 100,
        high: 200,
        critical: 500
    };

    const expReward = expRewards[severity] || 100;

    VulnerabilityModel.create({
        title: sanitizedTitle,
        description: sanitizedDescription,
        severity,
        expReward,
        reporterId: req.userId
    }, (error, result) => {
        if (error) {
            console.error('Create vulnerability error:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Server error' 
            });
        }

        // Add experience
        addExperience(req.userId, 25, 'Reported vulnerability');

        // Check for vulnerability reporting achievements
        VulnerabilityModel.getUserReportedCount(req.userId, (countError, countResult) => {
            if (!countError && countResult.length > 0) {
                checkAchievements(req.userId, 'vulnerabilities', countResult[0].total);
            }
        });

        // Log activity
        ActivityLogModel.create({
            userId: req.userId,
            actionType: 'vulnerability_reported',
            details: { 
                vulnerabilityId: result.insertId,
                title: sanitizedTitle,
                severity
            }
        }, (logError) => {
            if (logError) {
                console.error('Activity log error:', logError);
            }
        });

        res.status(201).json({
            success: true,
            message: 'Vulnerability reported successfully',
            vulnerability: {
                id: result.insertId,
                title: sanitizedTitle,
                description: sanitizedDescription,
                severity,
                exp_reward: expReward
            }
        });
    });
};

// Get vulnerabilities
const getVulnerabilities = (req, res) => {
    const { page = 1, limit = 10, status, severity } = req.query;
    const validation = validatePagination(page, limit);
    
    if (!validation.isValid) {
        return res.status(400).json({ 
            success: false, 
            message: validation.message 
        });
    }

    const offset = (validation.page - 1) * validation.limit;
    const filters = { status, severity };

    VulnerabilityModel.getAll(filters, validation.limit, offset, (error, vulnerabilities) => {
        if (error) {
            console.error('Get vulnerabilities error:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Server error' 
            });
        }

        res.json({
            success: true,
            vulnerabilities,
            pagination: {
                page: validation.page,
                limit: validation.limit
            }
        });
    });
};

// Get single vulnerability
const getVulnerability = (req, res) => {
    const { id } = req.params;

    VulnerabilityModel.findById(id, (error, vulnerabilities) => {
        if (error) {
            console.error('Get vulnerability error:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Server error' 
            });
        }

        if (vulnerabilities.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: 'Vulnerability not found' 
            });
        }

        res.json({
            success: true,
            vulnerability: vulnerabilities[0]
        });
    });
};

// Update vulnerability status
const updateVulnerabilityStatus = (req, res) => {
    const { id } = req.params;
    const { status } = req.body;

    if (!status) {
        return res.status(400).json({ 
            success: false, 
            message: 'Status is required' 
        });
    }

    if (!validateStatus(status)) {
        return res.status(400).json({ 
            success: false, 
            message: 'Invalid status. Must be: open, in_progress, resolved, or closed' 
        });
    }

    // Get vulnerability details first
    VulnerabilityModel.findById(id, (findError, vulnerabilities) => {
        if (findError) {
            console.error('Find vulnerability error:', findError);
            return res.status(500).json({ 
                success: false, 
                message: 'Server error' 
            });
        }

        if (vulnerabilities.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: 'Vulnerability not found' 
            });
        }

        const vulnerability = vulnerabilities[0];
        const resolverId = status === 'resolved' ? req.userId : null;

        VulnerabilityModel.updateStatus(id, status, resolverId, (updateError) => {
            if (updateError) {
                console.error('Update vulnerability error:', updateError);
                return res.status(500).json({ 
                    success: false, 
                    message: 'Server error' 
                });
            }

            // If resolved, add experience and check achievements
            if (status === 'resolved') {
                addExperience(req.userId, vulnerability.exp_reward, `Resolved: ${vulnerability.title}`);

                VulnerabilityModel.getUserResolvedCount(req.userId, (countError, countResult) => {
                    if (!countError && countResult.length > 0) {
                        checkAchievements(req.userId, 'vulnerabilities', countResult[0].total);
                    }
                });

                // Log activity
                ActivityLogModel.create({
                    userId: req.userId,
                    actionType: 'vulnerability_resolved',
                    details: { 
                        vulnerabilityId: id,
                        title: vulnerability.title,
                        expReward: vulnerability.exp_reward
                    }
                }, (logError) => {
                    if (logError) {
                        console.error('Activity log error:', logError);
                    }
                });
            }

            res.json({
                success: true,
                message: 'Vulnerability status updated successfully'
            });
        });
    });
};

// Get user's vulnerabilities
const getUserVulnerabilities = (req, res) => {
    const userId = req.params.userId || req.userId;

    VulnerabilityModel.getUserReported(userId, (reportedError, reported) => {
        if (reportedError) {
            console.error('Get reported vulnerabilities error:', reportedError);
            return res.status(500).json({ 
                success: false, 
                message: 'Server error' 
            });
        }

        VulnerabilityModel.getUserResolved(userId, (resolvedError, resolved) => {
            if (resolvedError) {
                console.error('Get resolved vulnerabilities error:', resolvedError);
                resolved = [];
            }

            res.json({
                success: true,
                reported,
                resolved
            });
        });
    });
};

module.exports = {
    createVulnerability,
    getVulnerabilities,
    getVulnerability,
    updateVulnerabilityStatus,
    getUserVulnerabilities
};