const db = require('../config/database');
const { addExperience, checkAchievements } = require('./userController');
const { validateSeverity, validateStatus, sanitizeInput, validateRequired, validatePagination } = require('../utils/validation');

// Create vulnerability report
const createVulnerability = (req, res) => {
    const { title, description, severity } = req.body;

    // Validate required fields
    const validation = validateRequired({ title, description, severity });
    if (!validation.isValid) {
        return res.status(400).json({ 
            success: false, 
            message: `${validation.field} is required` 
        });
    }

    // Validate severity
    if (!validateSeverity(severity)) {
        return res.status(400).json({ 
            success: false, 
            message: 'Invalid severity level. Must be: low, medium, high, or critical' 
        });
    }

    // Sanitize inputs
    const sanitizedTitle = sanitizeInput(title);
    const sanitizedDescription = sanitizeInput(description);

    // Calculate exp reward based on severity
    const expRewards = {
        low: 50,
        medium: 100,
        high: 200,
        critical: 500
    };

    const expReward = expRewards[severity] || 100;

    db.query(
        'INSERT INTO vulnerabilities (title, description, severity, exp_reward, reporter_id) VALUES (?, ?, ?, ?, ?)',
        [sanitizedTitle, sanitizedDescription, severity, expReward, req.userId],
        (error, result) => {
            if (error) {
                console.error('Create vulnerability error:', error);
                return res.status(500).json({ 
                    success: false, 
                    message: 'Server error' 
                });
            }

            // Add experience
            addExperience(req.userId, 25, 'Reported vulnerability');

            // Check for vulnerability reporting achievements
            db.query(
                'SELECT COUNT(*) as total FROM vulnerabilities WHERE reporter_id = ?',
                [req.userId],
                (countError, countResult) => {
                    if (!countError && countResult.length > 0) {
                        checkAchievements(req.userId, 'vulnerabilities_reported', countResult[0].total);
                    }
                }
            );

            // Log activity
            db.query(
                'INSERT INTO activity_logs (user_id, action_type, details) VALUES (?, ?, ?)',
                [req.userId, 'vulnerability_reported', JSON.stringify({ 
                    vulnerabilityId: result.insertId,
                    title: sanitizedTitle,
                    severity
                })],
                (logError) => {
                    if (logError) {
                        console.error('Activity log error:', logError);
                    }
                }
            );

            res.status(201).json({
                success: true,
                message: 'Vulnerability reported successfully',
                vulnerabilityId: result.insertId
            });
        }
    );
};

// Get all vulnerabilities
const getVulnerabilities = (req, res) => {
    const { status, severity, page = 1, limit = 10 } = req.query;
    
    // Validate pagination
    const { page: validPage, limit: validLimit } = validatePagination(page, limit);
    const offset = (validPage - 1) * validLimit;

    let query = `
        SELECT 
            v.*,
            reporter.username as reporter_name,
            resolver.username as resolver_name
        FROM vulnerabilities v
        LEFT JOIN users reporter ON v.reporter_id = reporter.id
        LEFT JOIN users resolver ON v.resolver_id = resolver.id
        WHERE 1=1
    `;
    const params = [];

    if (status && validateStatus(status)) {
        query += ' AND v.status = ?';
        params.push(status);
    }

    if (severity && validateSeverity(severity)) {
        query += ' AND v.severity = ?';
        params.push(severity);
    }

    query += ' ORDER BY v.created_at DESC LIMIT ? OFFSET ?';
    params.push(validLimit, offset);

    db.query(query, params, (error, vulnerabilities) => {
        if (error) {
            console.error('Get vulnerabilities error:', error);
            return res.status(500).json({ 
                success: false, 
                message: 'Server error' 
            });
        }

        // Get total count
        let countQuery = 'SELECT COUNT(*) as total FROM vulnerabilities WHERE 1=1';
        const countParams = [];

        if (status && validateStatus(status)) {
            countQuery += ' AND status = ?';
            countParams.push(status);
        }

        if (severity && validateSeverity(severity)) {
            countQuery += ' AND severity = ?';
            countParams.push(severity);
        }

        db.query(countQuery, countParams, (countError, countResult) => {
            if (countError) {
                console.error('Count error:', countError);
                return res.status(500).json({ 
                    success: false, 
                    message: 'Server error' 
                });
            }

            res.json({
                success: true,
                vulnerabilities,
                pagination: {
                    total: countResult[0].total,
                    page: validPage,
                    totalPages: Math.ceil(countResult[0].total / validLimit)
                }
            });
        });
    });
};

// Get single vulnerability
const getVulnerability = (req, res) => {
    const { id } = req.params;

    db.query(
        `SELECT 
            v.*,
            reporter.username as reporter_name,
            resolver.username as resolver_name
        FROM vulnerabilities v
        LEFT JOIN users reporter ON v.reporter_id = reporter.id
        LEFT JOIN users resolver ON v.resolver_id = resolver.id
        WHERE v.id = ?`,
        [id],
        (error, vulnerabilities) => {
            if (error) {
                console.error('Get vulnerability error:', error);
                return res.status(500).json({ 
                    success: false, 
                    message: 'Server error' 
                });
            }

            if (vulnerabilities.length === 0) {
                return res.status(404).json({ 
                    success: false, 
                    message: 'Vulnerability not found' 
                });
            }

            res.json({
                success: true,
                vulnerability: vulnerabilities[0]
            });
        }
    );
};

// Update vulnerability status
const updateVulnerabilityStatus = (req, res) => {
    const { id } = req.params;
    const { status } = req.body;

    // Validate status
    if (!validateStatus(status)) {
        return res.status(400).json({ 
            success: false, 
            message: 'Invalid status' 
        });
    }

    // Check if vulnerability exists
    db.query(
        'SELECT * FROM vulnerabilities WHERE id = ?',
        [id],
        (error, existing) => {
            if (error) {
                console.error('Check vulnerability error:', error);
                return res.status(500).json({ 
                    success: false, 
                    message: 'Server error' 
                });
            }

            if (existing.length === 0) {
                return res.status(404).json({ 
                    success: false, 
                    message: 'Vulnerability not found' 
                });
            }

            const vulnerability = existing[0];

            // Update status
            const updateParams = [status];
            let updateQuery = 'UPDATE vulnerabilities SET status = ?';

            // If resolving, set resolver and give rewards
            if (status === 'resolved' && vulnerability.status !== 'resolved') {
                updateQuery += ', resolver_id = ?';
                updateParams.push(req.userId);

                // Give exp reward to resolver
                addExperience(req.userId, vulnerability.exp_reward, `Resolved vulnerability: ${vulnerability.title}`);

                // Check for resolver achievements
                db.query(
                    'SELECT COUNT(*) as total FROM vulnerabilities WHERE resolver_id = ? AND status = "resolved"',
                    [req.userId],
                    (countError, countResult) => {
                        if (!countError && countResult.length > 0) {
                            checkAchievements(req.userId, 'vulnerabilities_resolved', countResult[0].total + 1);
                        }
                    }
                );

                // Log activity
                db.query(
                    'INSERT INTO activity_logs (user_id, action_type, details) VALUES (?, ?, ?)',
                    [req.userId, 'vulnerability_resolved', JSON.stringify({ 
                        vulnerabilityId: id,
                        title: vulnerability.title,
                        expReward: vulnerability.exp_reward
                    })],
                    (logError) => {
                        if (logError) {
                            console.error('Activity log error:', logError);
                        }
                    }
                );
            }

            updateQuery += ' WHERE id = ?';
            updateParams.push(id);

            db.query(updateQuery, updateParams, (updateError) => {
                if (updateError) {
                    console.error('Update vulnerability status error:', updateError);
                    return res.status(500).json({ 
                        success: false, 
                        message: 'Server error' 
                    });
                }

                res.json({
                    success: true,
                    message: 'Vulnerability status updated successfully'
                });
            });
        }
    );
};

// Get user's vulnerabilities
const getUserVulnerabilities = (req, res) => {
    const userId = req.params.userId || req.userId;

    // Get reported vulnerabilities
    db.query(
        `SELECT 
            v.*,
            resolver.username as resolver_name
        FROM vulnerabilities v
        LEFT JOIN users resolver ON v.resolver_id = resolver.id
        WHERE v.reporter_id = ?
        ORDER BY v.created_at DESC`,
        [userId],
        (reportedError, reported) => {
            if (reportedError) {
                console.error('Get reported vulnerabilities error:', reportedError);
                return res.status(500).json({ 
                    success: false, 
                    message: 'Server error' 
                });
            }

            // Get resolved vulnerabilities
            db.query(
                `SELECT 
                    v.*,
                    reporter.username as reporter_name
                FROM vulnerabilities v
                LEFT JOIN users reporter ON v.reporter_id = reporter.id
                WHERE v.resolver_id = ?
                ORDER BY v.updated_at DESC`,
                [userId],
                (resolvedError, resolved) => {
                    if (resolvedError) {
                        console.error('Get resolved vulnerabilities error:', resolvedError);
                        return res.status(500).json({ 
                            success: false, 
                            message: 'Server error' 
                        });
                    }

                    res.json({
                        success: true,
                        reported,
                        resolved
                    });
                }
            );
        }
    );
};

module.exports = {
    createVulnerability,
    getVulnerabilities,
    getVulnerability,
    updateVulnerabilityStatus,
    getUserVulnerabilities
};