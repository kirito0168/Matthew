const db = require('../services/db');

class VulnerabilityModel {
    // Create new vulnerability
    static create(vulnerabilityData, callback) {
        const { title, description, severity, category, steps_to_reproduce, impact, expReward, reporterId } = vulnerabilityData;
        const query = `
            INSERT INTO vulnerabilities 
            (title, description, severity, category, steps_to_reproduce, impact, exp_reward, reporter_id, status, created_at, updated_at) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, 'open', NOW(), NOW())
        `;
        db.query(query, [title, description, severity, category, steps_to_reproduce, impact, expReward, reporterId], callback);
    }

    // Get all vulnerabilities with pagination
    static getAll(filters, limit, offset, callback) {
        let query = `
            SELECT 
                v.*,
                u.username as reporter_name,
                ur.username as resolver_name
            FROM vulnerabilities v
            LEFT JOIN users u ON v.reporter_id = u.id
            LEFT JOIN users ur ON v.resolver_id = ur.id
            WHERE 1=1
        `;
        const params = [];

        if (filters.status) {
            query += ' AND v.status = ?';
            params.push(filters.status);
        }

        if (filters.severity) {
            query += ' AND v.severity = ?';
            params.push(filters.severity);
        }

        if (filters.reporter_id) {
            query += ' AND v.reporter_id = ?';
            params.push(filters.reporter_id);
        }

        if (filters.category) {
            query += ' AND v.category = ?';
            params.push(filters.category);
        }

        query += ' ORDER BY v.created_at DESC LIMIT ? OFFSET ?';
        params.push(limit, offset);

        db.query(query, params, callback);
    }

    // Get total count for pagination
    static getTotalCount(filters, callback) {
        let query = 'SELECT COUNT(*) as total FROM vulnerabilities WHERE 1=1';
        const params = [];

        if (filters.status) {
            query += ' AND status = ?';
            params.push(filters.status);
        }

        if (filters.severity) {
            query += ' AND severity = ?';
            params.push(filters.severity);
        }

        if (filters.reporter_id) {
            query += ' AND reporter_id = ?';
            params.push(filters.reporter_id);
        }

        if (filters.category) {
            query += ' AND category = ?';
            params.push(filters.category);
        }

        db.query(query, params, callback);
    }

    // Get vulnerability by ID
    static findById(vulnerabilityId, callback) {
        const query = `
            SELECT 
                v.*,
                u.username as reporter_name,
                ur.username as resolver_name
            FROM vulnerabilities v
            LEFT JOIN users u ON v.reporter_id = u.id
            LEFT JOIN users ur ON v.resolver_id = ur.id
            WHERE v.id = ?
        `;
        db.query(query, [vulnerabilityId], callback);
    }

    // Update vulnerability status
    static updateStatus(vulnerabilityId, status, resolverId, callback) {
        const query = 'UPDATE vulnerabilities SET status = ?, resolver_id = ?, updated_at = NOW() WHERE id = ?';
        db.query(query, [status, resolverId, vulnerabilityId], callback);
    }

    // Get user's reported vulnerabilities
    static getUserReported(userId, callback) {
        const query = `
            SELECT 
                v.*,
                ur.username as resolver_name
            FROM vulnerabilities v
            LEFT JOIN users ur ON v.resolver_id = ur.id
            WHERE v.reporter_id = ? 
            ORDER BY v.created_at DESC
        `;
        db.query(query, [userId], callback);
    }

    // Get user's resolved vulnerabilities
    static getUserResolved(userId, callback) {
        const query = `
            SELECT 
                v.*,
                u.username as reporter_name
            FROM vulnerabilities v
            LEFT JOIN users u ON v.reporter_id = u.id
            WHERE v.resolver_id = ? AND v.status = 'resolved'
            ORDER BY v.updated_at DESC
        `;
        db.query(query, [userId], callback);
    }

    // Get vulnerability count for user
    static getUserReportedCount(userId, callback) {
        const query = 'SELECT COUNT(*) as total FROM vulnerabilities WHERE reporter_id = ?';
        db.query(query, [userId], callback);
    }

    // Get resolved vulnerability count for user
    static getUserResolvedCount(userId, callback) {
        const query = 'SELECT COUNT(*) as total FROM vulnerabilities WHERE resolver_id = ? AND status = "resolved"';
        db.query(query, [userId], callback);
    }

    // Check if vulnerability exists and get its details
    static checkExists(vulnerabilityId, callback) {
        const query = 'SELECT id, exp_reward, title FROM vulnerabilities WHERE id = ?';
        db.query(query, [vulnerabilityId], callback);
    }

    // Get vulnerabilities by category
    static getByCategory(category, limit, offset, callback) {
        const query = `
            SELECT 
                v.*,
                u.username as reporter_name,
                ur.username as resolver_name
            FROM vulnerabilities v
            LEFT JOIN users u ON v.reporter_id = u.id
            LEFT JOIN users ur ON v.resolver_id = ur.id
            WHERE v.category = ?
            ORDER BY v.created_at DESC 
            LIMIT ? OFFSET ?
        `;
        db.query(query, [category, limit, offset], callback);
    }

    // Get vulnerabilities by severity
    static getBySeverity(severity, limit, offset, callback) {
        const query = `
            SELECT 
                v.*,
                u.username as reporter_name,
                ur.username as resolver_name
            FROM vulnerabilities v
            LEFT JOIN users u ON v.reporter_id = u.id
            LEFT JOIN users ur ON v.resolver_id = ur.id
            WHERE v.severity = ?
            ORDER BY v.created_at DESC 
            LIMIT ? OFFSET ?
        `;
        db.query(query, [severity, limit, offset], callback);
    }

    // Search vulnerabilities by title or description
    static search(searchTerm, limit, offset, callback) {
        const query = `
            SELECT 
                v.*,
                u.username as reporter_name,
                ur.username as resolver_name
            FROM vulnerabilities v
            LEFT JOIN users u ON v.reporter_id = u.id
            LEFT JOIN users ur ON v.resolver_id = ur.id
            WHERE v.title LIKE ? OR v.description LIKE ?
            ORDER BY v.created_at DESC 
            LIMIT ? OFFSET ?
        `;
        const searchPattern = `%${searchTerm}%`;
        db.query(query, [searchPattern, searchPattern, limit, offset], callback);
    }

    // Get vulnerability statistics
    static getStats(callback) {
        const query = `
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN status = 'open' THEN 1 ELSE 0 END) as open,
                SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
                SUM(CASE WHEN status = 'resolved' THEN 1 ELSE 0 END) as resolved,
                SUM(CASE WHEN status = 'closed' THEN 1 ELSE 0 END) as closed,
                SUM(CASE WHEN severity = 'low' THEN 1 ELSE 0 END) as low_severity,
                SUM(CASE WHEN severity = 'medium' THEN 1 ELSE 0 END) as medium_severity,
                SUM(CASE WHEN severity = 'high' THEN 1 ELSE 0 END) as high_severity,
                SUM(CASE WHEN severity = 'critical' THEN 1 ELSE 0 END) as critical_severity
            FROM vulnerabilities
        `;
        db.query(query, [], callback);
    }
}

module.exports = VulnerabilityModel;