const db = require('../config/database');

class VulnerabilityModel {
    // Create new vulnerability
    static create(vulnerabilityData, callback) {
        const { title, description, severity, expReward, reporterId } = vulnerabilityData;
        const query = 'INSERT INTO vulnerabilities (title, description, severity, exp_reward, reporter_id) VALUES (?, ?, ?, ?, ?)';
        db.query(query, [title, description, severity, expReward, reporterId], callback);
    }

    // Get all vulnerabilities with pagination
    static getAll(filters, limit, offset, callback) {
        let query = `
            SELECT 
                v.*,
                u.username as reporter_name,
                ur.username as resolver_name
            FROM vulnerabilities v
            LEFT JOIN users u ON v.reporter_id = u.id
            LEFT JOIN users ur ON v.resolver_id = ur.id
            WHERE 1=1
        `;
        const params = [];

        if (filters.status) {
            query += ' AND v.status = ?';
            params.push(filters.status);
        }

        if (filters.severity) {
            query += ' AND v.severity = ?';
            params.push(filters.severity);
        }

        query += ' ORDER BY v.created_at DESC LIMIT ? OFFSET ?';
        params.push(limit, offset);

        db.query(query, params, callback);
    }

    // Get vulnerability by ID
    static findById(vulnerabilityId, callback) {
        const query = `
            SELECT 
                v.*,
                u.username as reporter_name,
                ur.username as resolver_name
            FROM vulnerabilities v
            LEFT JOIN users u ON v.reporter_id = u.id
            LEFT JOIN users ur ON v.resolver_id = ur.id
            WHERE v.id = ?
        `;
        db.query(query, [vulnerabilityId], callback);
    }

    // Update vulnerability status
    static updateStatus(vulnerabilityId, status, resolverId, callback) {
        const query = 'UPDATE vulnerabilities SET status = ?, resolver_id = ?, resolved_at = NOW() WHERE id = ?';
        db.query(query, [status, resolverId, vulnerabilityId], callback);
    }

    // Get user's reported vulnerabilities
    static getUserReported(userId, callback) {
        const query = `
            SELECT * FROM vulnerabilities 
            WHERE reporter_id = ? 
            ORDER BY created_at DESC
        `;
        db.query(query, [userId], callback);
    }

    // Get user's resolved vulnerabilities
    static getUserResolved(userId, callback) {
        const query = `
            SELECT * FROM vulnerabilities 
            WHERE resolver_id = ? AND status = 'resolved'
            ORDER BY resolved_at DESC
        `;
        db.query(query, [userId], callback);
    }

    // Get vulnerability count for user
    static getUserReportedCount(userId, callback) {
        const query = 'SELECT COUNT(*) as total FROM vulnerabilities WHERE reporter_id = ?';
        db.query(query, [userId], callback);
    }

    // Get resolved vulnerability count for user
    static getUserResolvedCount(userId, callback) {
        const query = 'SELECT COUNT(*) as total FROM vulnerabilities WHERE resolver_id = ? AND status = "resolved"';
        db.query(query, [userId], callback);
    }

    // Check if vulnerability exists and get its details
    static checkExists(vulnerabilityId, callback) {
        const query = 'SELECT id, exp_reward, title FROM vulnerabilities WHERE id = ?';
        db.query(query, [vulnerabilityId], callback);
    }
}

module.exports = VulnerabilityModel;